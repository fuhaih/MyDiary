        [HttpGet]
        [Route("Connect")]
        public HttpResponseMessage Connect()
        {
            //在服务器端接受Web Socket请求，传入的函数作为Web Socket的处理函数，待Web Socket建立后该函数会被调用，在该函数中可以对Web Socket进行消息收发
            HttpContext.Current.AcceptWebSocketRequest(ProcessRequest);
            return Request.CreateResponse(HttpStatusCode.SwitchingProtocols);
        }
        public async Task ProcessRequest(AspNetWebSocketContext context)
        {
            await Task.Yield();
            var socket = context.WebSocket;//传入的context中有当前的web socket对象
            string userID = context.QueryString["userID"];
            DataSocketModel socketModel = new DataSocketModel(userID, socket);
            socketList.Add(socketModel);
            receive(socket);;
            
            //进入一个无限循环，当web socket close是循环结束
            while (true)
            {
                if(socket.State == WebSocketState.Closed)
                {
                    socketList.Remove(socketModel);
                    break;
                }
                //SendBuildList(socketModel);
                //SendProjectList(socketModel);
                //SendWxUserList(socketModel);
                System.Threading.Thread.Sleep(60*1000);
                
            }
        }
        /// <summary>
        /// 接收消息
        /// </summary>
        /// <param name="socket"></param>
        /// <returns></returns>
        private async Task receive(WebSocket socket)
        {
            int i = 0;
            while(true)
            {
                System.Diagnostics.Debug.WriteLine($"----循环次数:{i++}");
                try
                {
                    var buffer = new ArraySegment<byte>(new byte[byte_length]);
                    var receivedResult = await socket.ReceiveAsync(buffer, CancellationToken.None).ConfigureAwait(false);

                    //信息接收，我这边定义的消息结构为 userid:toUserid:content
                    string recvMsg = Encoding.UTF8.GetString(buffer.Array, 0, receivedResult.Count);
                    System.Diagnostics.Debug.WriteLine($"----recvMsg:{recvMsg}");
                    //var msg = JsonConvert.DeserializeObject<Dictionary<string, string>>(recvMsg);

                    //var message = JsonConvert.SerializeObject(msg);//content;
                    System.Threading.Thread.Sleep(10);
                    var recvBytes = Encoding.UTF8.GetBytes($"recCount:{sendCount++},sendTime:{DateTime.Now},msg:{{recvMsg}}");
                    var sendBuffer = new ArraySegment<byte>(recvBytes);
                    await socket.SendAsync(sendBuffer, WebSocketMessageType.Text, true, CancellationToken.None);
                }
                catch (Exception exp)
                {
                    System.Diagnostics.Debug.WriteLine($"----exp:{exp.Message}");
                    //System.Diagnostics.Trace.WriteLine($"----exp:{exp.Message}");
                    break;
                }
                Thread.Sleep(2000);
            }
            
        }

receive方法await socket.ReceiveAsync(buffer, CancellationToken.None)执行完后需要获取上下文来执行后续代码，但是上下文在主线程中，所以导致这里会一直被阻塞