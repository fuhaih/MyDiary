
默认是轮询，即会将消息轮流发给多个消费者，但这样对消费得比较慢的消费者不公平
rabbitmq Quality of Service ，服务质量保证，可以设置每个消费者最多同时消费消息数量，即在非自动确认消息的前提下，如果一定数目的消息（通过基于consume或者channel设置QOS的值）未被确认前，不进行消费新的消息

区块链合约：就是一个规则，比如说转账功能，你需要从一个账户中扣除一些金额，再给另一个账户新增一些金额，就是这样一个规则功能，就是一个合约，然后在不同业务中也需要不一样的功能和规则，就需要编写不同的合约，合约包括一个存储、模块、事件等。

substrate不是完全使用rust语言，所以对该门语言了解还是不够深，他的合约编写是使用的他类似rust语法的一些领域语言来实现的。

同事负责的substrate多节点部署的研究，其他部分dotnet 接口

区块链的理解：
使用方面，就是现在比特币，感觉没有其他的适用的地方，区块链不是一个数据库，是用来存储一个状态的，然后区块里是存储的状态变更过程，就比如说比特币，那他的状态就是余额，状态变更就是交易，如果把区块链当成数据库来用是很恐怖的，首先这样的话，每个节点(用户)都相当于一个数据库的备份，想想很可怕，然后其并不具备查询的条件，没有索引什么的概念，用来当数据库也是不可能的，为什么能做比特币，就是首先比特币数量是有限的，在设计之初就确定了比特币的数量，然后链的生成是很慢的，需要大量的算力来生成区块，然后区块的验证是很简单的，每个节点都能很快验证账户余额是否正确。

简单说一下公司业务：
电表和采集器配置和维护是由楼宇业务部来完成。
从底层开始：西门子一些采集器会采集电表数据，然后生成xml文件，通过我们的软件传送到我们的平台，入库，我们会把电表的累积值进行处理，处理成消耗量，存储入库，这些都是电表的数据，然后会有标准规划这些电表为分项模型，就是按照用电的类型来进行用能的划分，比如说照明、空调这些，然后把这些电表的数据和这些分项关联，然后计算分项的用能数据，还有这些模型的配置等都是我们这边的业务，除了分项模型，业主有需要的时候还能配置其他模型，还有楼宇信息，包括名称、用能单位、电费账户、经纬度等地理信息等，还有维护每个建筑的电表信息，模型信息，这些是最主要的信息，然后还有其他的一些充电桩、节能改造(光伏发电、风力发电等)等信息，然后通过平台展示这些数据，进行对比分析，分析负荷(最高的功率)、负载率(某一时段 (如:以一个月、一周)平均负荷÷该时段最大负荷) 、达标率、同环比等分析用能情况。然后还有一些异常检测，监测数据异常，并推送给业主，不同类型的建筑的用能情况基本都符合一个曲线的，办公建筑的曲线就是九点钟开始慢慢攀升，然后五六点降下来，酒店的能耗曲线就不太一样，所以可以根据以往的用能情况来判断用能是否在某个范围内，如果判定有异常，就会推送异常给业主。还有会和一些其他公司合作，把数据共享给他们。

其他时间：虹桥区平台国产化开发，把平台项目和地标xml传输入库项目修改为java版本。

资源、试题(选择题、判断题、阅读题)、试卷，试卷会包含多个试题，但是不同试题类型的数据格式是不一样的，这样的话用sql server不好做连接(当然要实现也是可以的，但是有更好的实现方式)，mongodb这种文档型的数据库就比较适合存储试卷这种类型的数据。存储的时候能整个试卷存储为一个document，然后读取的时候也可以一整个读出来。
修改mongodb的文件存储，修改成可使用事务的存储方式，非关系型数据库其实是为了性能，牺牲一些数据强一致性的，所以这样改造可能会有悖非关系型数据库的使用场景，但是这个项目中主要是看中了非关系型数据库的数据格式可扩展性，可以稍微牺牲点性能来实现强一致性。后续视频播放是由于网络宽带问题，导致的视频播放问题(因为一个班级几十个学生一起播放，公司宽带太低，导致卡顿，所以视频存储转接到阿里云中。)